{"version":3,"sources":["webpack:///./node_modules/common-tags/es/TemplateTag/TemplateTag.js","webpack:///./node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js","webpack:///./node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js","webpack:///./node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js","webpack:///./node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js","webpack:///./node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js","webpack:///./node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js","webpack:///./node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js","webpack:///./node_modules/common-tags/es/stripIndent/stripIndent.js","webpack:///./node_modules/common-tags/es/commaLists/commaLists.js","webpack:///./node_modules/common-tags/es/commaListsAnd/commaListsAnd.js","webpack:///./node_modules/common-tags/es/commaListsOr/commaListsOr.js","webpack:///./node_modules/common-tags/es/html/html.js","webpack:///./node_modules/common-tags/es/safeHtml/safeHtml.js","webpack:///./node_modules/common-tags/es/oneLine/oneLine.js","webpack:///./node_modules/common-tags/es/oneLineTrim/oneLineTrim.js","webpack:///./node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js","webpack:///./node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js","webpack:///./node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js","webpack:///./node_modules/common-tags/es/inlineLists/inlineLists.js","webpack:///./node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js","webpack:///./node_modules/common-tags/es/stripIndents/stripIndents.js","webpack:///./src/components/images.js","webpack:///./src/components/link-cards.js","webpack:///./src/pages/research.js","webpack:///../src/image-utils.ts","webpack:///../src/components/hooks.ts","webpack:///../src/components/layout-wrapper.tsx","webpack:///../src/components/picture.tsx","webpack:///../src/components/placeholder.tsx","webpack:///../src/components/main-image.tsx","webpack:///../src/components/gatsby-image.server.tsx","webpack:///../src/components/gatsby-image.browser.tsx","webpack:///../src/components/static-image.server.tsx","webpack:///../src/components/static-image.tsx","webpack:///./node_modules/camelcase/index.js"],"names":["strings","raw","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_templateObject","freeze","value","_classCallCheck","instance","TypeError","TemplateTag","_this","this","_len","arguments","transformers","Array","_key","tag","_len2","expressions","_key2","interimTag","bind","transformEndResult","map","transformString","reduce","processSubstitutions","isArray","transformer","previousTag","template","_len3","substitutions","_key3","apply","undefined","concat","resultSoFar","remainingPart","substitution","transformSubstitution","shift","str","res","transform","onString","onSubstitution","endResult","onEndResult","side","trim","toLowerCase","replace","Error","_toConsumableArray","arr","arr2","from","type","match","indent","Math","min","el","regexp","RegExp","replaceWhat","replaceWith","toString","defaults","separator","conjunction","serial","opts","arrayLength","join","separatorIndex","lastIndexOf","slice","splitBy","includes","split","isValidValue","x","Number","isNaN","filter","Image","query","render","data","image","images","edges","find","n","node","relativePath","filename","childImageSharp","gatsbyImageData","LinkCard","require","rgb","pubwebDisplay","pubweb","fulltextDisplay","fulltextpdf","fulltextaccDisplay","fulltextacc","className","pubtype","tabIndex","aria-label","shorttitle","style","zIndex","alt","padding","date","authors","fontStyle","place","lineHeight","fontSize","color","marginBottom","marginTop","abstract","href","display","cardGrid","useStaticQuery","site","siteMetadata","research","item","index","pageTitle","pageDescription","id","name","class","role","for","area-label","height","imageCache","Set","hasNativeLazyLoadSupport","HTMLImageElement","gatsbyImageIsInstalled","GATSBY___IMAGE","storeImageloaded","cacheKey","add","hasImageLoaded","has","format","getMainProps","isLoading","isLoaded","loading","toggleLoaded","ref","current","document","documentElement","dataset","objectFit","objectPosition","window","objectFitPolyfill","import","e","left","position","top","transition","width","willChange","shouldLoad","data-main-image","opacity","onLoad","currentTarget","img","src","currentSrc","decode","then","getPlaceholderProps","placeholder","layout","backgroundColor","wrapperStyle","bottom","right","result","aria-hidden","data-placeholder-image","Sizer","React","paddingTop","maxWidth","LayoutWrapper","children","Fragment","srcSet","innerRef","decoding","Picture","forwardRef","fallback","sources","sizes","fallbackImage","media","propTypes","PropTypes","isRequired","displayName","Placeholder","propName","componentName","MainImage","altValidator","string","object","GatsbyImageHydrator","_this2","createRef","state","_lazyHydrate","hasSSRHtml","root","querySelector","hydrated","Promise","resolve","_this3","lazyHydrator","lazyHydrate","toggleIsLoaded","setState","forceRender","_setupIntersectionObserver","useCache","intersectionObserver","createIntersectionObserver","_this4","JSON","stringify","onStartLoad","wasCached","unobserveRef","shouldComponentUpdate","nextProps","nextState","hasChanged","_this5","componentDidMount","ssrElement","complete","addEventListener","removeEventListener","componentWillUnmount","Type","as","overflow","data-gatsby-image-wrapper","wStyle","wClass","wrapperProps","sizer","dangerouslySetInnerHTML","__html","suppressHydrationWarning","Component","GatsbyImage","warn","console","error","propsKey","checkDimensionProps","number","validLayouts","StaticImage","GatsbyImageBrowser","imageData","__imageData","__error","camelCase","input","options","assign","pascalCase","toUpperCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","preserveCamelCase","_","p1","m","charAt","module","exports","default"],"mappings":"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","file":"component---src-pages-research-js-076554f4f05fd3d4ad46.js","sourcesContent":["var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\n\n\nvar TemplateTag = function () {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  function TemplateTag() {\n    var _this = this;\n\n    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n      transformers[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, TemplateTag);\n\n    this.tag = function (strings) {\n      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        expressions[_key2 - 1] = arguments[_key2];\n      }\n\n      if (typeof strings === 'function') {\n        // if the first argument passed is a function, assume it is a template tag and return\n        // an intermediary tag that processes the template using the aforementioned tag, passing the\n        // result to our tag\n        return _this.interimTag.bind(_this, strings);\n      }\n\n      if (typeof strings === 'string') {\n        // if the first argument passed is a string, just transform it\n        return _this.transformEndResult(strings);\n      } // else, return a transformed end result of processing the template with our tag\n\n\n      strings = strings.map(_this.transformString.bind(_this));\n      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));\n    }; // if first argument is an array, extrude it as a list of transformers\n\n\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    } // if any transformers are functions, this means they are not initiated - automatically initiate them\n\n\n    this.transformers = transformers.map(function (transformer) {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    }); // return an ES2015 template tag\n\n    return this.tag;\n  }\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n\n\n  _createClass(TemplateTag, [{\n    key: 'interimTag',\n\n    /**\n     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n     * template tag to our own template tag.\n     * @param  {Function}        nextTag          - the received template tag\n     * @param  {Array<String>}   template         - the template to process\n     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n     * @return {*}                                - the final processed value\n     */\n    value: function interimTag(previousTag, template) {\n      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        substitutions[_key3 - 2] = arguments[_key3];\n      }\n\n      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));\n    }\n    /**\n     * Performs bulk processing on the tagged template, transforming each substitution and then\n     * concatenating the resulting values into a string.\n     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n     * @param  {String}   resultSoFar   - this iteration's result string so far\n     * @param  {String}   remainingPart - the template chunk after the current substitution\n     * @return {String}                 - the result of joining this iteration's processed substitution with the result\n     */\n\n  }, {\n    key: 'processSubstitutions',\n    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {\n      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);\n      return ''.concat(resultSoFar, substitution, remainingPart);\n    }\n    /**\n     * Iterate through each transformer, applying the transformer's `onString` method to the template\n     * strings before all substitutions are processed.\n     * @param {String}  str - The input string\n     * @return {String}     - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformString',\n    value: function transformString(str) {\n      var cb = function cb(res, transform) {\n        return transform.onString ? transform.onString(res) : res;\n      };\n\n      return this.transformers.reduce(cb, str);\n    }\n    /**\n     * When a substitution is encountered, iterates through each transformer and applies the transformer's\n     * `onSubstitution` method to the substitution.\n     * @param  {*}      substitution - The current substitution\n     * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n     * @return {*}                   - The final result of applying all substitution transformations.\n     */\n\n  }, {\n    key: 'transformSubstitution',\n    value: function transformSubstitution(substitution, resultSoFar) {\n      var cb = function cb(res, transform) {\n        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;\n      };\n\n      return this.transformers.reduce(cb, substitution);\n    }\n    /**\n     * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n     * template literal after all substitutions have finished processing.\n     * @param  {String} endResult - The processed template, just before it is returned from the tag\n     * @return {String}           - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformEndResult',\n    value: function transformEndResult(endResult) {\n      var cb = function cb(res, transform) {\n        return transform.onEndResult ? transform.onEndResult(res) : res;\n      };\n\n      return this.transformers.reduce(cb, endResult);\n    }\n  }]);\n\n  return TemplateTag;\n}();\n\nexport default TemplateTag;","/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\nexport default trimResultTransformer;","function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\n\n\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n\n        return endResult;\n      }\n\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\nexport default stripIndentTransformer;","/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nvar replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceResultTransformer requires at least 2 arguments.');\n      }\n\n      return endResult.replace(replaceWhat, replaceWith);\n    }\n  };\n};\n\nexport default replaceResultTransformer;","var replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');\n      } // Do not touch if null or undefined\n\n\n      if (substitution == null) {\n        return substitution;\n      } else {\n        return substitution.toString().replace(replaceWhat, replaceWith);\n      }\n    }\n  };\n};\n\nexport default replaceSubstitutionTransformer;","var defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\n\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial; // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        } // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n\n\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n\n      return substitution;\n    }\n  };\n};\n\nexport default inlineArrayTransformer;","var splitStringTransformer = function splitStringTransformer(splitBy) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (splitBy != null && typeof splitBy === 'string') {\n        if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n          substitution = substitution.split(splitBy);\n        }\n      } else {\n        throw new Error('You need to specify a string character to split by.');\n      }\n\n      return substitution;\n    }\n  };\n};\n\nexport default splitStringTransformer;","var isValidValue = function isValidValue(x) {\n  return x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n};\n\nvar removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {\n  return {\n    onSubstitution: function onSubstitution(substitution) {\n      if (Array.isArray(substitution)) {\n        return substitution.filter(isValidValue);\n      }\n\n      if (isValidValue(substitution)) {\n        return substitution;\n      }\n\n      return '';\n    }\n  };\n};\n\nexport default removeNonPrintingValuesTransformer;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar stripIndent = new TemplateTag(stripIndentTransformer, trimResultTransformer);\nexport default stripIndent;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar commaLists = new TemplateTag(inlineArrayTransformer({\n  separator: ','\n}), stripIndentTransformer, trimResultTransformer);\nexport default commaLists;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar commaListsAnd = new TemplateTag(inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'and'\n}), stripIndentTransformer, trimResultTransformer);\nexport default commaListsAnd;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar commaListsOr = new TemplateTag(inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'or'\n}), stripIndentTransformer, trimResultTransformer);\nexport default commaListsOr;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport removeNonPrintingValuesTransformer from '../removeNonPrintingValuesTransformer';\nvar html = new TemplateTag(splitStringTransformer('\\n'), removeNonPrintingValuesTransformer, inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\nexport default html;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport replaceSubstitutionTransformer from '../replaceSubstitutionTransformer';\nvar safeHtml = new TemplateTag(splitStringTransformer('\\n'), inlineArrayTransformer, stripIndentTransformer, trimResultTransformer, replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer(/\"/g, '&quot;'), replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer(/`/g, '&#x60;'));\nexport default safeHtml;","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLine = new TemplateTag(replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '), trimResultTransformer);\nexport default oneLine;","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineTrim = new TemplateTag(replaceResultTransformer(/(?:\\n\\s*)/g, ''), trimResultTransformer);\nexport default oneLineTrim;","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineCommaLists = new TemplateTag(inlineArrayTransformer({\n  separator: ','\n}), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\nexport default oneLineCommaLists;","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineCommaListsOr = new TemplateTag(inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'or'\n}), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\nexport default oneLineCommaListsOr;","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineCommaListsAnd = new TemplateTag(inlineArrayTransformer({\n  separator: ',',\n  conjunction: 'and'\n}), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\nexport default oneLineCommaListsAnd;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar inlineLists = new TemplateTag(inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\nexport default inlineLists;","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\nvar oneLineInlineLists = new TemplateTag(inlineArrayTransformer, replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\nexport default oneLineInlineLists;","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nvar stripIndents = new TemplateTag(stripIndentTransformer('all'), trimResultTransformer);\nexport default stripIndents;","import React from \"react\";\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\n//https://stackoverflow.com/questions/55122752/reusable-gatsby-image-component-with-dynamic-image-sources\n \nconst Image = props => (\n  <StaticQuery\n    query ={graphql`\n    query {\n      images: allFile {\n        edges {\n          node {\n            relativePath\n            name\n            childImageSharp {\n              gatsbyImageData(layout: FIXED\n                              width: 198\n                              height: 198)\n            }\n          }   \n        }\n      }\n    }\n    `}\n  render={data => {\n   const image = data.images.edges.find(n => {\n      return n.node.relativePath.includes(props.filename);\n    });\n    if (!image) {\n      return null;\n    }\n    \n    return (\n      <GatsbyImage image={image.node.childImageSharp.gatsbyImageData} />\n      \n      );\n  }}\n  />\n);\nexport default Image;\n\n  ","import React from \"react\"\r\nimport Image from '../components/images.js';\r\nvar Color = require('color');\r\n\r\nvar black = Color.rgb([255, 255, 255])\r\n\r\nconst LinkCard = props => {\r\n  const pubwebDisplay = !(props.pubweb) ? \"none\" : \"inline\";\r\n  const fulltextDisplay = !(props.fulltextpdf) ? \"none\" : \"inline\";\r\n  const fulltextaccDisplay = !(props.fulltextacc) ? \"none\" : \"inline\";\r\n\r\n    return (\r\n<div className=\"card\" pubtype={props.pubtype} tabIndex=\"0\" aria-label={props.shorttitle}>\r\n  <div className=\"first\">\r\n    <div className=\"cardImage\" style={{zIndex:\"0\"}}>\r\n   <Image filename={props.image} alt={props.alt}></Image>\r\n   </div>\r\n   <div style={{padding:\"4px\"}}>\r\n   <br></br>\r\n   <h2>{props.shorttitle} ({props.date})<br></br></h2>\r\n   <br></br>\r\n   <h3>{props.authors}, </h3>\r\n  <h3 style={{fontStyle:\"italic\"}}>{props.place}</h3>\r\n  </div>\r\n</div>\r\n\r\n  <div className=\"second\" style={{lineHeight:\"1.1\"}} aria-label={props.shorttitle}>\r\n    <p style={{fontSize:\"smaller\", color:\"black\", marginBottom:\"0px\", marginTop:\"10px\"}}>{props.abstract}</p>\r\n    <br></br>\r\n    <div className=\"button-outer\" style={{marginTop:\"0px\", fontSize:\"smaller\"}}>\r\n    <a href={props.pubweb} style={{display:pubwebDisplay}}>Visit the website. </a>\r\n    <br></br>\r\n    <p><a href={props.fulltextpdf} style={{display:fulltextDisplay}}>See full text. </a> <span  style={{display:fulltextaccDisplay}}>(<a href={props.fulltextacc} >Accessible version</a>)</span></p>\r\n    </div>\r\n</div>\r\n</div>\r\n\r\n\r\n\r\n    )\r\n  }\r\n  \r\n  export default LinkCard\r\n  \r\n\r\n  ","import React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport LinkCard from \"../components/link-cards\"\r\n\r\nexport default props => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          research {\r\n            shorttitle\r\n            authors\r\n            place\r\n            image\r\n            abstract\r\n            fulltextpdf\r\n            color\r\n            pubtype\r\n            pubweb\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const cardGrid = data.site.siteMetadata.research.map((item, index) => (\r\n        <LinkCard \r\n          date={item.date}\r\n          place={item.place}\r\n          shorttitle={item.shorttitle}\r\n          authors={item.authors}\r\n          abstract={item.abstract}\r\n          fulltextpdf={item.fulltextpdf}\r\n          //fulltextacc={item.fulltextacc}\r\n          color={item.color}\r\n          pubtype={item.pubtype}\r\n          pubweb={item.pubweb}\r\n          image={item.image}/>\r\n  ))\r\n\r\n  return (\r\n    <Layout\r\n      pageTitle=\"Research\"\r\n      pageDescription=\"Learn more about my research\"\r\n    >\r\n    Use the selections below to explore the gallery.\r\n\r\n<input type=\"radio\" id=\"All\" name=\"categories\" value=\"All\" aria-label=\"All\"/>\r\n<input type=\"radio\" id=\"journal\" name=\"categories\" value=\"journal\" aria-label=\"Journal articles\"></input>\r\n<input type=\"radio\" id=\"institutional\" name=\"categories\" value=\"institutional\"/>\r\n<input type=\"radio\" id=\"wp\" name=\"categories\" value=\"wp\"></input>\r\n<input type=\"radio\" id=\"blog\" name=\"categories\" value=\"blog\"></input>\r\n<input type=\"radio\" id=\"conference\" name=\"categories\" value=\"conference\"></input>\r\n<input type=\"radio\" id=\"econ\" name=\"categories\" value=\"econ\"></input>\r\n<input type=\"radio\" id=\"non\" name=\"categories\" value=\"non\"></input>\r\n<input type=\"radio\" id=\"history\" name=\"categories\" value=\"history\"></input>\r\n\r\n<div class=\"filters\" role=\"list\">\r\n  <li aria-label=\"All\">\r\n    <label for=\"All\" aria-label=\"All\" >All</label>\r\n  </li>\r\n  <li aria-label=\"journal articles\">\r\n    <label for=\"journal\" area-label=\"journal articles\">Journal Articles</label>\r\n  </li>\r\n  <li>\r\n    <label for=\"institutional\">Policy & Institutional Reports</label>\r\n  </li>\r\n  <li>\r\n    <label for=\"wp\">Working Papers</label>\r\n  </li>\r\n  <li>\r\n    <label for=\"blog\">Op-eds & Blogs</label>\r\n  </li>\r\n  <li>\r\n    <label for=\"conference\">Conferences & Presentations</label>\r\n  </li>\r\n  <li>\r\n    <label for=\"econ\">Economics</label>\r\n  </li>\r\n  <li>\r\n    <label for=\"non\">Econ-Related Fields</label>\r\n  </li>\r\n  <li>\r\n    <label for=\"history\">History</label>\r\n  </li> \r\n</div>\r\n<div className=\"card-grid\">\r\n    {cardGrid}\r\n</div>\r\n    \r\n    </Layout>\r\n  )\r\n}\r\n","/* eslint-disable no-unused-expressions */\nimport { stripIndent } from \"common-tags\"\nimport camelCase from \"camelcase\"\nimport { IGatsbyImageData } from \".\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320,\n  654,\n  768,\n  1024,\n  1366,\n  1600,\n  1920,\n  2048,\n  2560,\n  3440,\n  3840,\n  4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.substr(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(stripIndent`\n    The requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* eslint-disable no-unused-expressions */\nimport {\n  useState,\n  CSSProperties,\n  useEffect,\n  HTMLAttributes,\n  ImgHTMLAttributes,\n  ReactEventHandler,\n  SetStateAction,\n  Dispatch,\n  RefObject,\n} from \"react\"\nimport { Node } from \"gatsby\"\nimport { PlaceholderProps } from \"./placeholder\"\nimport { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport {\n  IGatsbyImageHelperArgs,\n  generateImageData,\n  Layout,\n  EVERY_BREAKPOINT,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\nconst imageCache = new Set<string>()\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport function storeImageloaded(cacheKey?: string): void {\n  if (cacheKey) {\n    imageCache.add(cacheKey)\n  }\n}\n\nexport function hasImageLoaded(cacheKey: string): boolean {\n  return imageCache.has(cacheKey)\n}\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nexport type ImageDataLike = FileNode | IGatsbyImageDataParent | IGatsbyImageData\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport async function applyPolyfill(\n  ref: RefObject<HTMLImageElement>\n): Promise<void> {\n  if (!(`objectFitPolyfill` in window)) {\n    await import(\n      /* webpackChunkName: \"gatsby-plugin-image-objectfit-polyfill\" */ `objectFitPolyfill`\n    )\n  }\n  ;(window as any).objectFitPolyfill(ref.current)\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  toggleLoaded?: (loaded: boolean) => void,\n  cacheKey?: string,\n  ref?: RefObject<HTMLImageElement>,\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  const onLoad: ReactEventHandler<HTMLImageElement> = function (e) {\n    if (isLoaded) {\n      return\n    }\n\n    storeImageloaded(cacheKey)\n\n    const target = e.currentTarget\n    const img = new Image()\n    img.src = target.currentSrc\n\n    if (img.decode) {\n      // Decode the image through javascript to support our transition\n      img\n        .decode()\n        .catch(() => {\n          // ignore error, we just go forward\n        })\n        .then(() => {\n          toggleLoaded(true)\n        })\n    } else {\n      toggleLoaded(true)\n    }\n  }\n\n  // Polyfill \"object-fit\" if unsupported (mostly IE)\n  if (ref?.current && !(`objectFit` in document.documentElement.style)) {\n    ref.current.dataset.objectFit = style.objectFit ?? `cover`\n    ref.current.dataset.objectPosition = `${style.objectPosition ?? `50% 50%`}`\n    applyPolyfill(ref)\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n    onLoad,\n    ref,\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport function useImageLoaded(\n  cacheKey: string,\n  loading: \"lazy\" | \"eager\",\n  ref: any\n): {\n  isLoaded: boolean\n  isLoading: boolean\n  toggleLoaded: Dispatch<SetStateAction<boolean>>\n} {\n  const [isLoaded, toggleLoaded] = useState(false)\n  const [isLoading, toggleIsLoading] = useState(loading === `eager`)\n\n  const rAF =\n    typeof window !== `undefined` && `requestAnimationFrame` in window\n      ? requestAnimationFrame\n      : function (cb: TimerHandler): number {\n          return setTimeout(cb, 16)\n        }\n  const cRAF =\n    typeof window !== `undefined` && `cancelAnimationFrame` in window\n      ? cancelAnimationFrame\n      : clearTimeout\n\n  useEffect(() => {\n    let interval: number\n    // @see https://stackoverflow.com/questions/44074747/componentdidmount-called-before-ref-callback/50019873#50019873\n    function toggleIfRefExists(): void {\n      if (ref.current) {\n        if (loading === `eager` && ref.current.complete) {\n          storeImageloaded(cacheKey)\n          toggleLoaded(true)\n        } else {\n          toggleIsLoading(true)\n        }\n      } else {\n        interval = rAF(toggleIfRefExists)\n      }\n    }\n    toggleIfRefExists()\n\n    return (): void => {\n      cRAF(interval)\n    }\n  }, [])\n\n  return {\n    isLoading,\n    isLoaded,\n    toggleLoaded,\n  }\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../global.d.ts\" />\n\nimport React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer: string | null = null\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> = function LayoutWrapper({\n  children,\n  ...props\n}) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {\n        // eslint-disable-next-line no-undef\n        SERVER && <NativeScriptLoading />\n      }\n    </Fragment>\n  )\n}\n","/* eslint-disable filenames/match-regex */\nimport React, {\n  FunctionComponent,\n  ImgHTMLAttributes,\n  forwardRef,\n  LegacyRef,\n} from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n  innerRef: LegacyRef<HTMLImageElement>\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  innerRef,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n      ref={innerRef}\n    />\n  )\n}\n\nexport const Picture = forwardRef<HTMLImageElement, PictureProps>(\n  function Picture(\n    { fallback, sources = [], shouldLoad = true, ...props },\n    ref\n  ) {\n    const sizes = props.sizes || fallback?.sizes\n    const fallbackImage = (\n      <Image\n        {...props}\n        {...fallback}\n        sizes={sizes}\n        shouldLoad={shouldLoad}\n        innerRef={ref}\n      />\n    )\n\n    if (!sources.length) {\n      return fallbackImage\n    }\n\n    return (\n      <picture>\n        {sources.map(({ media, srcSet, type }) => (\n          <source\n            key={`${media}-${type}-${srcSet}`}\n            type={type}\n            media={media}\n            srcSet={shouldLoad ? srcSet : undefined}\n            data-srcset={!shouldLoad ? srcSet : undefined}\n            sizes={sizes}\n          />\n        ))}\n        {fallbackImage}\n      </picture>\n    )\n  }\n)\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> = function Placeholder({\n  fallback,\n  ...props\n}) {\n  if (fallback) {\n    return (\n      <Picture\n        {...props}\n        fallback={{\n          src: fallback,\n        }}\n        aria-hidden\n        alt=\"\"\n      />\n    )\n  } else {\n    return <div {...props}></div>\n  }\n}\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React, { forwardRef } from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage = forwardRef<HTMLImageElement, MainImageProps>(\n  function MainImage(props, ref) {\n    return (\n      <>\n        <Picture ref={ref} {...props} />\n        <noscript>\n          <Picture {...props} shouldLoad={true} />\n        </noscript>\n      </>\n    )\n  }\n)\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React, {\n  ElementType,\n  FunctionComponent,\n  CSSProperties,\n  WeakValidationMap,\n} from \"react\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImageHydrator: FunctionComponent<{\n  as?: ElementType\n  style?: CSSProperties\n  className?: string\n}> = function GatsbyImageHydrator({ as: Type = `div`, children, ...props }) {\n  return <Type {...props}>{children}</Type>\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = function GatsbyImage({\n  as,\n  className,\n  class: preactClass,\n  style,\n  image,\n  loading = `lazy`,\n  imgClassName,\n  imgStyle,\n  backgroundColor,\n  objectFit,\n  objectPosition,\n  ...props\n}) {\n  if (!image) {\n    console.warn(`[gatsby-plugin-image] Missing image prop`)\n    return null\n  }\n  if (preactClass) {\n    className = preactClass\n  }\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: placeholderBackgroundColor,\n  } = image\n\n  const { style: wStyle, className: wClass, ...wrapperProps } = getWrapperProps(\n    width,\n    height,\n    layout\n  )\n\n  const cleanedImages: IGatsbyImageData[\"images\"] = {\n    fallback: undefined,\n    sources: [],\n  }\n  if (images.fallback) {\n    cleanedImages.fallback = {\n      ...images.fallback,\n      srcSet: images.fallback.srcSet\n        ? removeNewLines(images.fallback.srcSet)\n        : undefined,\n    }\n  }\n\n  if (images.sources) {\n    cleanedImages.sources = images.sources.map(source => {\n      return {\n        ...source,\n        srcSet: removeNewLines(source.srcSet),\n      }\n    })\n  }\n\n  return (\n    <GatsbyImageHydrator\n      {...wrapperProps}\n      as={as}\n      style={{\n        ...wStyle,\n        ...style,\n        backgroundColor,\n      }}\n      className={`${wClass}${className ? ` ${className}` : ``}`}\n    >\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            undefined,\n            undefined,\n            undefined,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    </GatsbyImageHydrator>\n  )\n}\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","/* eslint-disable no-unused-expressions */\nimport React, {\n  Component,\n  ElementType,\n  createRef,\n  MutableRefObject,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  RefObject,\n  CSSProperties,\n} from \"react\"\nimport {\n  getWrapperProps,\n  hasNativeLazyLoadSupport,\n  storeImageloaded,\n  hasImageLoaded,\n  gatsbyImageIsInstalled,\n} from \"./hooks\"\nimport { PlaceholderProps } from \"./placeholder\"\nimport { MainImageProps } from \"./main-image\"\nimport { Layout } from \"../image-utils\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport { Unobserver } from \"./intersection-observer\"\nimport { render } from \"react-dom\"\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: () => void\n  onError?: () => void\n  onStartLoad?: (props: { wasCached?: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nclass GatsbyImageHydrator extends Component<\n  GatsbyImageProps,\n  { isLoading: boolean; isLoaded: boolean }\n> {\n  root: RefObject<HTMLImageElement | undefined> = createRef<\n    HTMLImageElement | undefined\n  >()\n  hydrated: MutableRefObject<boolean> = { current: false }\n  forceRender: MutableRefObject<boolean> = {\n    // In dev we use render not hydrate, to avoid hydration warnings\n    current: process.env.NODE_ENV === `development`,\n  }\n  lazyHydrator: () => void | null = null\n  ref = createRef<HTMLImageElement>()\n  unobserveRef: Unobserver\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isLoading: hasNativeLazyLoadSupport(),\n      isLoaded: false,\n    }\n  }\n\n  _lazyHydrate(props, state): Promise<void> {\n    const hasSSRHtml = this.root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    )\n    // On first server hydration do nothing\n    if (hasNativeLazyLoadSupport() && hasSSRHtml && !this.hydrated.current) {\n      this.hydrated.current = true\n      return Promise.resolve()\n    }\n\n    return import(`./lazy-hydrate`).then(({ lazyHydrate }) => {\n      this.lazyHydrator = lazyHydrate(\n        {\n          image: props.image.images,\n          isLoading: state.isLoading,\n          isLoaded: state.isLoaded,\n          toggleIsLoaded: () => {\n            props.onLoad?.()\n\n            this.setState({\n              isLoaded: true,\n            })\n          },\n          ref: this.ref,\n          ...props,\n        },\n        this.root,\n        this.hydrated,\n        this.forceRender\n      )\n    })\n  }\n\n  /**\n   * Choose if setupIntersectionObserver should use the image cache or not.\n   */\n  _setupIntersectionObserver(useCache = true): void {\n    import(`./intersection-observer`).then(({ createIntersectionObserver }) => {\n      const intersectionObserver = createIntersectionObserver(() => {\n        if (this.root.current) {\n          const cacheKey = JSON.stringify(this.props.image.images)\n          this.props.onStartLoad?.({\n            wasCached: useCache && hasImageLoaded(cacheKey),\n          })\n          this.setState({\n            isLoading: true,\n            isLoaded: useCache && hasImageLoaded(cacheKey),\n          })\n        }\n      })\n\n      if (this.root.current) {\n        this.unobserveRef = intersectionObserver(this.root)\n      }\n    })\n  }\n\n  shouldComponentUpdate(nextProps, nextState): boolean {\n    let hasChanged = false\n    if (!this.state.isLoading && nextState.isLoading && !nextState.isLoaded) {\n      // Props have changed between SSR and hydration, so we need to force render instead of hydrate\n      this.forceRender.current = true\n    }\n    // this check mostly means people do not have the correct ref checks in place, we want to reset some state to suppport loading effects\n    if (this.props.image.images !== nextProps.image.images) {\n      // reset state, we'll rely on intersection observer to reload\n      if (this.unobserveRef) {\n        // unregister intersectionObserver\n        this.unobserveRef()\n\n        // // on unmount, make sure we cleanup\n        if (this.hydrated.current && this.lazyHydrator) {\n          render(null, this.root.current)\n        }\n      }\n\n      this.setState(\n        {\n          isLoading: false,\n          isLoaded: false,\n        },\n        () => {\n          this._setupIntersectionObserver(false)\n        }\n      )\n\n      hasChanged = true\n    }\n\n    if (this.root.current && !hasChanged) {\n      this._lazyHydrate(nextProps, nextState)\n    }\n\n    return false\n  }\n\n  componentDidMount(): void {\n    if (this.root.current) {\n      const ssrElement = this.root.current.querySelector(\n        `[data-gatsby-image-ssr]`\n      ) as HTMLImageElement\n      const cacheKey = JSON.stringify(this.props.image.images)\n\n      // when SSR and native lazyload is supported we'll do nothing ;)\n      if (\n        hasNativeLazyLoadSupport() &&\n        ssrElement &&\n        gatsbyImageIsInstalled()\n      ) {\n        this.props.onStartLoad?.({ wasCached: false })\n\n        // When the image is already loaded before we have hydrated, we trigger onLoad and cache the item\n        if (ssrElement.complete) {\n          this.props.onLoad?.()\n          storeImageloaded(cacheKey)\n        } else {\n          // We need the current class context (this) inside our named onLoad function\n          // The named function is necessary to easily remove the listener afterward.\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const _this = this\n          // add an onLoad to the image\n          ssrElement.addEventListener(`load`, function onLoad() {\n            ssrElement.removeEventListener(`load`, onLoad)\n\n            _this.props.onLoad?.()\n            storeImageloaded(cacheKey)\n          })\n        }\n\n        return\n      }\n\n      // Fallback to custom lazy loading (intersection observer)\n      this._setupIntersectionObserver(true)\n    }\n  }\n\n  componentWillUnmount(): void {\n    // Cleanup when onmount happens\n    if (this.unobserveRef) {\n      // unregister intersectionObserver\n      this.unobserveRef()\n\n      // on unmount, make sure we cleanup\n      if (this.hydrated.current && this.lazyHydrator) {\n        this.lazyHydrator()\n      }\n    }\n\n    return\n  }\n\n  render(): JSX.Element {\n    const Type = this.props.as || `div`\n    const { width, height, layout } = this.props.image\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    let className = this.props.className\n    // preact class\n    if (this.props.class) {\n      className = this.props.class\n    }\n\n    const sizer = getSizer(layout, width, height)\n\n    return (\n      <Type\n        {...wrapperProps}\n        style={{\n          ...wStyle,\n          ...this.props.style,\n          backgroundColor: this.props.backgroundColor,\n        }}\n        className={`${wClass}${className ? ` ${className}` : ``}`}\n        ref={this.root}\n        dangerouslySetInnerHTML={{\n          __html: sizer,\n        }}\n        suppressHydrationWarning\n      />\n    )\n  }\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = function GatsbyImage(\n  props\n) {\n  if (!props.image) {\n    if (process.env.NODE_ENV === `development`) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n    }\n    return null\n  }\n\n  if (!gatsbyImageIsInstalled()) {\n    console.error(\n      `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n    )\n  }\n  const { className, class: classSafe, backgroundColor, image } = props\n  const { width, height, layout } = image\n  const propsKey = JSON.stringify([\n    width,\n    height,\n    layout,\n    className,\n    classSafe,\n    backgroundColor,\n  ])\n  return <GatsbyImageHydrator key={propsKey} {...props} />\n}\n\nGatsbyImage.propTypes = propTypes\n\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<\n  IStaticImageProps & IPrivateProps\n> = _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<\n  IStaticImageProps & IPrivateProps\n> = _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;"],"sourceRoot":""}